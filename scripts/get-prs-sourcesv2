#!/bin/bash

set -xe

PR_LABEL="$1"

search_results=$(curl https://api.github.com/search/issues?q="org:QubesOS+label:$PR_LABEL+is:open")
prs=$(echo "$search_results" | jq -r '.items | .[] | .html_url')

BASE_URL="https://github.com/QubesOS/qubes-"
API_BASE="https://api.github.com/repos/QubesOS/qubes-"
BUILDER_INSTANCE=$HOME/qubes-builder

qb_opts=("--option" "+components+linux-kernel:branch=main" )

components=""

components_group="$2"
# include group only if some part of it got a PR
include_group=

cd "$BUILDER_INSTANCE" || exit 1

prs_details=()

for pr in $prs; do
    pr_short="${pr#${BASE_URL}}"
    pr_component="${pr_short%%/*}"
    pr_number="${pr##*/}"

    base_branch=$(curl "${API_BASE}${pr_component}/pulls/${pr_number}" | jq -r .base.ref)
    if [ "$base_branch" = "master" ]; then
        # synchronize to new name
        base_branch=main
    fi
    default_branch=$(./qb "${qb_opts[@]}" -c "${pr_component}" config get-components -a branch)
    [ -z "$default_branch" ] && default_branch=main
    if [ "$base_branch" != "$default_branch" ]; then
        echo "PR $pr is not against $default_branch, ignoring" >&2
        continue
    fi

    ./qb "${qb_opts[@]}" \
        -o skip-files-fetch=true \
        -o +components+"${pr_component}":packages=false \
        -c "${pr_component}" \
        package fetch
    git -C "artifacts/sources/${pr_component}" fetch $BASE_URL$pr_component refs/pull/$pr_number/head
    commitid=$(git -C "artifacts/sources/${pr_component}" show -q --format=%H FETCH_HEAD)
    prs_details+=( "$pr/commits/$commitid" )
    git -C "artifacts/sources/${pr_component}" merge --no-edit --no-ff FETCH_HEAD || { echo "Merge conflict on $pr"; exit 1; }
    git -C "artifacts/sources/${pr_component}" submodule update --init || { echo "Failed to refresh submodules after merging $pr"; exit 1; }
    # fetch new tarballs if necessary
    ./qb "${qb_opts[@]}" -c "${pr_component}" package fetch
    components="$components $pr_component"
    if [ -n "$components_group" ] && [[ "$components_group" = *" $pr_component "* ]]; then
        include_group=true
    fi
done

# fetch remaining components in the group
if [ -n "$include_group" ]; then
    for component in $components_group; do
        if [ -d "artifacts/sources/$component" ]; then
            # already fetched
            continue
        fi
        ./qb "${qb_opts[@]}" -c "$component" package fetch
        components="$components $component"
    done
fi

printf -- '-c %s\n' $components | sort |uniq > components.opts
echo "${prs_details[@]}" > "$CI_PROJECT_DIR/pull-requests.txt"
