#!/usr/bin/python3

import os
import sys
from pathlib import Path, PurePath
from qubesbuilder.distribution import QubesDistribution
from qubesbuilder.executors.container import ContainerExecutor
from qubesbuilder.log import init_logger

init_logger(verbose=True)


class CIError(Exception):
    pass


def package_name(file_name):
    if file_name.endswith(".deb"):
        return file_name.split("_", 1)[0]
    elif file_name.endswith(".rpm"):
        return "-".join(file_name.split("-")[:-2])
    elif "pkg.tar" in file_name:
        return "-".join(file_name.split("-")[:-3])
    else:
        return file_name


def main(release: str, qubes_distribution: QubesDistribution, repository: Path):
    container_image = qubes_distribution.distribution
    environment = {}
    if qubes_distribution.fullname in ("fedora", "centos-stream"):
        pkgext = "rpm"
        repo_name = f"{qubes_distribution.package_set}-{release}"
        run_cmd = (
            f"sed -i -e 's/4\\.2/{release}/g ' /etc/yum.repos.d/qubes.repo && "
            "dnf -y update && dnf -y --allowerasing install"
        )
    elif qubes_distribution.fullname in ("debian", "ubuntu"):
        pkgext = "deb"
        run_cmd = (
            f"sed -i -e 's/4\\.2/{release}/g ' /etc/apt/sources.list && "
            "apt update && env; apt-get -o 'Dpkg::Options::=--force-confnew' -y install"
        )
        environment.update(
            {
                "DEBIAN_FRONTEND": "noninteractive",
                "DEBIAN_PRIORITY": "critical",
                "DEBCONF_NOWARNINGS": "yes",
            }
        )
    elif qubes_distribution.fullname == "archlinux":
        pkgext = "pkg.tar.zst"
        run_cmd = (
            f"sed -i -e 's/4\\.2/{release}/g ' /etc/pacman.conf && "
            "pacman -Sy --noprogressbar  && pacman -U --noconfirm --noprogressbar"
        )
    else:
        raise CIError("Unsupported distribution!")

    if qubes_distribution.package_set == "host":
        excluded_packages_host = (
            os.environ.get("TRAVIS_INSTALL_EXCLUDE_DOM0", "").strip("\n").split()
            + os.environ.get("CI_INSTALL_EXCLUDE_DOM0", "").strip("\n").split()
        )
    else:
        excluded_packages_host = []
    excluded_packages = (
        os.environ.get("TRAVIS_INSTALL_EXCLUDE", "").strip("\n").split()
        + os.environ.get("CI_INSTALL_EXCLUDE", "").strip("\n").split()
        + excluded_packages_host
    )
    packages = [
        pkg
        for pkg in repository.rglob(f"*.{pkgext}")
        if package_name(pkg.name) not in excluded_packages
        and not pkg.name.endswith(".src.rpm")
    ]

    copy_in = []
    for pkg in packages:
        copy_in.append((pkg, PurePath("/repository")))

    if not packages:
        print("Nothing to install!")
        return

    cmd = [f"set -o pipefail; {run_cmd} /repository/*.{pkgext} | cat"]
    executor = ContainerExecutor("docker", container_image)
    executor.run(
        cmd, copy_in=copy_in, override_container_cmd=True, environment=environment
    )


if __name__ == "__main__":
    if len(sys.argv) < 4:
        print("usage: repository_dir qubes_release qubes_distribution")
        sys.exit(1)
    try:
        release = sys.argv[2]
        dist = QubesDistribution(sys.argv[3])
        repository_path = Path(sys.argv[1]).expanduser().resolve() / dist.distribution
        main(release, dist, repository_path)
    except Exception as e:
        print(str(e))
        sys.exit(1)
